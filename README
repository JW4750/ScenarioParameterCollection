# Scenario Parameter Collection

本项目提供基于 HighD 数据集的高速公路功能场景自动识别与参数统计工具，包括：

- **文献调研文档**：`docs/scenario_catalog.md` 汇总高速公路典型场景及关键参数。
- **Python 库**：`scenario_parameter_collection`，支持从 HighD `*_tracks.csv` 数据自动识别场景，统计发生频率，并计算关键参数的概率分布（KDE）。
- **命令行工具**：`python -m scenario_parameter_collection.cli`，批量处理 CSV 文件并输出统计结果。

- **收敛分析 CLI**：`scenario-convergence-analysis`，按录入顺序逐步引入 HighD 片段并评估场景频率、参数分布的收敛情况。


## 功能特性

- 支持识别 18 类高速公路场景：自由巡航、自由加速/减速、稳定/紧跟车、接近慢车、前车/自车制动（含紧急制动）、切入/切出、变道、拥堵起步、接近静止目标等。
- 自动补充前车的速度与加速度信息，并采用“标签组合匹配”的两步场景挖掘方法（先按纵向/横向动作打标签，再顺序匹配标签组合）。
- 统计每类场景的发生频率以及关键参数的概率密度函数（Gaussian KDE）。

- 支持计算逐步引入 HighD 录制片段时的 MISE、对称 KL 散度、Hellinger 距离，评估何时达到稳定分布。

- 将事件明细、频率统计、分布估计导出为 CSV/JSON，便于后续分析与可视化。

## 安装

```bash
pip install -e .[dev]
```

依赖：Python ≥ 3.9、NumPy、Pandas、SciPy、PyTest（开发/测试）。

## 使用示例

1. **准备数据**：从 [https://www.highd-dataset.com/](https://www.highd-dataset.com/) 下载一个或多个 `*_tracks.csv` 文件，放置在 `data/` 目录。
2. **命令行执行**：

```bash
python -m scenario_parameter_collection.cli --tracks data/ --output-dir outputs
```

默认帧率为 25 Hz，可使用 `--frame-rate` 指定其他值。运行结束后将生成：

- `outputs/scenario_events.csv`：每个识别事件的起止帧及关键参数。
- `outputs/scenario_counts.csv`：各类场景发生次数。
- `outputs/parameter_distributions.json`：每个场景关键参数的概率密度函数（KDE 采样网格与概率值）。

- `outputs/erwin_coverage.csv`：Erwin de Gelder 10 大功能场景的覆盖统计（含描述与计数）。
- `outputs/erwin_coverage_summary.json`：覆盖率汇总（总事件数、已覆盖事件数、覆盖比、未覆盖事件数）。
- `outputs/unmapped_events.csv`：未能映射到 Erwin 场景的事件明细（场景名称、时间、车道 ID 等）。
- `outputs/unmatched_frames.csv`：未被任何场景覆盖的帧列表（记录 trackId 与 frame）。
- `outputs/frame_coverage_summary.json`：帧级覆盖率统计（总帧数、未覆盖帧数、覆盖比例）。

3. **生成可视化报告**：

```bash
python -m scenario_parameter_collection.visualization --outputs outputs --html outputs/report.html
```

该命令会读取上一步生成的三个结果文件，自动构建包含以下内容的交互式 HTML 页面（Windows Edge 可直接打开）：

- 场景发生频率柱状图及明细表格；
- 各类场景关键参数的概率密度曲线；
- 事件样例表（默认展示前 20 条）。

4. **收敛性评估**：

```bash
scenario-convergence-analysis --tracks data --output-dir outputs/convergence
```

默认阈值来源于 `docs/convergence_methodology.md`：MISE ≤ 2×10⁻³、对称 KL ≤ 5×10⁻³、Hellinger ≤ 5×10⁻²。命令会在输出目录下生成：

- `convergence_steps.csv`：每次纳入新片段后的场景总数、频率分布变化、参数分布最大变化；
- `parameter_shifts.csv`：逐场景逐参数的三项距离指标；
- `convergence_summary.json`：整体阈值、是否收敛以及最终的场景频率。

## Python API

```python
from scenario_parameter_collection.highd_loader import load_tracks
from scenario_parameter_collection.detection import HighDScenarioDetector
from scenario_parameter_collection.statistics import estimate_parameter_distributions

tracks = load_tracks("data/01_tracks.csv")
detector = HighDScenarioDetector(frame_rate=25.0)
result = detector.detect(tracks)
stats = estimate_parameter_distributions(result.events)

print(result.coverage_ratio())
print(stats.counts)
```

更多场景定义及参数说明见 `docs/scenario_catalog.md`；Erwin de Gelder 场景覆盖映射与调研见 `docs/erwin_scenario_mapping.md`；收敛评价文献综述与阈值依据见 `docs/convergence_methodology.md`。


## 测试

```bash
pytest
```

## 许可证


MIT License，详见 `LICENSE`。
